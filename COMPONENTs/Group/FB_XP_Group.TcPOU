<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_XP_Group" Id="{8498ca03-d67c-40d7-a201-fbe2556517c0}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Do not call the body - Stick to OOP'}
(* XPlanar Collision Avoidance Groupe - 1 per associated XPlanar 
	The Planar group is a software object that prevents collisions between Planar movers as well as collisions of Planar movers with the boundary of 
	the stator area on the two-dimensional XPlanar stator area. To do this, the 2D areas of all objects in the group are blocked. When a motion command 
	is transferred to a mover, the required area is requested from the Planar group and the motion command is rejected if this area would collide 
	with already reserved areas. If the motion command can be executed, the area is added to the set of reserved area and blocked accordingly. *)
FUNCTION_BLOCK FB_XP_Group EXTENDS FB_CH_Object IMPLEMENTS I_XP_Group
VAR
	//Link to Planar-Group object
	fbGroup : MC_PlanarGroup;
		
	{attribute 'hide'}  
	bInitDone :BOOL := FALSE;
	{attribute 'hide'}
	ipXpSystem : I_XP_System_Registration;
	{attribute 'hide'}               	
	fbFeedback 			: FB_XP_Feedback(ipSourceInfo := fbSourceInfo);	
	{attribute 'hide'}                   	
	eActiveCommand 		: CHALET_Nc.E_NcAxisCommands := CHALET_Nc.E_NcAxisCommands.None;

END_VAR


// Planar-Feedback objects
VAR
	{attribute 'hide'} 
	fbFeedbackDisable : MC_PlanarFeedback;
	{attribute 'hide'} 
	fbFeedbackEnable : MC_PlanarFeedback;
	{attribute 'hide'} 
	fbFeedbackReset : MC_PlanarFeedback;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddEnvironment" Id="{41add7ae-4060-42fe-883c-5c1c7da87217}">
      <Declaration><![CDATA[METHOD AddEnvironment : HRESULT
VAR_INPUT
	refEnvironment : REFERENCE TO MC_PlanarEnvironment;
	refFeedback : REFERENCE TO MC_PlanarFeedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[refEnvironment.AddToGroup(refFeedback, fbGroup);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMover" Id="{1777c6d9-7bed-4a1f-bca6-254e6f9e1c8e}">
      <Declaration><![CDATA[METHOD AddMover : HRESULT
VAR_INPUT
	refMover : REFERENCE TO MC_PlanarMover;
	refFeedback : REFERENCE TO MC_PlanarFeedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[refMover.AddToGroup(refFeedback, fbGroup);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTrack" Id="{7a7af25f-02cb-4811-a248-ad448db0b5df}">
      <Declaration><![CDATA[METHOD AddTrack : HRESULT
VAR_INPUT
	refTrack : REFERENCE TO MC_PlanarTrack;
	refFeedback : REFERENCE TO MC_PlanarFeedback;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[refTrack.AddToGroup(refFeedback, fbGroup);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{85b114b1-70fc-49e3-8503-6bb5c26bc2f3}">
      <Declaration><![CDATA[METHOD Disable : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.eActiveCommand 				:= CHALET_NC.E_NcAxisCommands.Disable;
THIS^.fbFeedback.ActiveCommand 		:= TO_STRING(THIS^.eActiveCommand);	
THIS^.fbFeedback.LastCommandAccepted:= TRUE;		
THIS^.fbFeedback.Busy 				:= TRUE;

THIS^.fbGroup.Disable(fbFeedbackDisable);

Disable := S_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{b4fb47ab-2d98-4c30-948d-7b8f1936a6e0}">
      <Declaration><![CDATA[METHOD Enable : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.fbFeedback.Busy THEN
	THIS^.eActiveCommand 				:= CHALET_NC.E_NcAxisCommands.Enable;
	THIS^.fbFeedback.ActiveCommand 		:= TO_STRING(THIS^.eActiveCommand);	
	THIS^.fbFeedback.LastCommandAccepted:= TRUE;		
	THIS^.fbFeedback.Busy 				:= TRUE;

	THIS^.fbGroup.Enable(fbFeedbackEnable);
	Enable := S_OK;
ELSE
	Enable := S_FALSE;
	THIS^.fbFeedback.LastCommandAccepted:= FALSE;	
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{da4e8bb5-d5ae-450d-8864-7bbb6b96a419}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	ipSystem : I_CH_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Do the following code once during start up and not during onlinechange
IF NOT bInCopyCode THEN 
	

	(* Register to the Xplanar System
	   1. Test if the interface exists
	   2. Test if the object implements a "System for Mover" interface 
	*)
	IF ipSystem <> 0 AND_THEN __QUERYINTERFACE(ipSystem,THIS^.ipXpSystem) THEN
		THIS^.ipXpSystem.LinkGroup(THIS^);
	END_IF
	
	
	THIS^.fbFeedback.ActiveCommand 		:= TO_STRING(THIS^.eActiveCommand);	
	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Feedback" Id="{c0edddbd-f355-4a4a-a725-864430c28248}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY Feedback : I_XP_Feedback]]></Declaration>
      <Get Name="Get" Id="{dc812c97-b15a-401a-9f3b-64d355822f49}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Feedback := THIS^.fbFeedback;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{66129f6a-c1f8-456a-8d9f-6e277599e547}">
      <Declaration><![CDATA[METHOD Initialize : HRESULT
VAR_INPUT
END_VAR
VAR
	stVarInfo : __SYSTEM.VAR_INFO;
END_VAR
VAR_INST
	//This error cannot be reset. Requires a reset cold
	{attribute 'hide'}	
	fbInitError : FB_TcAlarm;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check if link to MC-Mover is mapped
IF NOT THIS^.Mapped THEN
	IF NOT fbInitError.bRaised THEN 
		//This error cannot be reset. Requires a reset cold
		fbInitError.CreateEx(stEventEntry:=TC_EVENTS.CHALET_Base_Events.VariableLinkMissing, ipSourceInfo := THIS^.fbSourceInfo, bWithConfirmation := FALSE);
		stVarInfo := __VARINFO(fbGroup);
		fbInitError.ipArguments.AddString(stVarInfo.Symbol);
		fbInitError.Raise(0);
	END_IF
	Initialize := E_FAIL;
	RETURN;
END_IF


IF NOT bInitDone THEN
	//Busy
	Initialize := S_PENDING;

	bInitDone := TRUE;	
	
ELSE	
	//Done
	Initialize := S_OK;	
END_IF


THIS^.eActiveCommand 				:= CHALET_NC.E_NcAxisCommands.Initialize;
THIS^.fbFeedback.ActiveCommand 		:= TO_STRING(THIS^.eActiveCommand);	
THIS^.fbFeedback.LastCommandAccepted:= TRUE;	
//Set done or keep in busy state	
THIS^.fbFeedback.HR := Initialize;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mapped" Id="{6a85ea34-3ffe-4720-bfdb-6178f048beec}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY Mapped : BOOL //Project is mapped to MC (McToPlc and PlcToMc)
]]></Declaration>
      <Get Name="Get" Id="{fda70048-c09d-4b44-afc5-8ff72caca863}">
        <Declaration><![CDATA[VAR
	bMcToPlcNotMapped 	: BOOL;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bMcToPlcNotMapped := F_GetMappingStatus(ADR(THIS^.fbGroup.MCTOPLC_STD), SIZEOF(THIS^.fbGroup.MCTOPLC_STD)) <> EPlcMappingStatus.MS_Mapped;

Mapped := NOT bMcToPlcNotMapped;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="OID" Id="{4f6c2922-2b4c-4835-96a8-ece6336f2e37}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
//Unique object ID
PROPERTY OID : OTCID ]]></Declaration>
      <Get Name="Get" Id="{458e7571-9c70-4baa-a297-fb0fe11a9383}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[OID := THIS^.fbGroup.MCTOPLC_STD.GroupOID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="PlanarGroup" Id="{74f744eb-d8ce-4185-bf21-5e0f5c95cdb5}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY PlanarGroup : REFERENCE TO MC_PlanarGroup]]></Declaration>
      <Get Name="Get" Id="{51e50ae7-ca49-40ec-b508-873d74ed1688}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[PlanarGroup ref= THIS^.fbGroup;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{71993433-3088-4fa7-9522-c7efbd808005}">
      <Declaration><![CDATA[METHOD Reset : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT THIS^.fbFeedback.Busy THEN
	THIS^.eActiveCommand 				:= CHALET_NC.E_NcAxisCommands.Reset;
	THIS^.fbFeedback.ActiveCommand 		:= TO_STRING(THIS^.eActiveCommand);	
	THIS^.fbFeedback.LastCommandAccepted:= TRUE;		
	THIS^.fbFeedback.Busy 				:= TRUE;

	THIS^.fbGroup.Reset(fbFeedbackReset);
	Reset := S_OK;
ELSE
	Reset := S_FALSE;
	THIS^.fbFeedback.LastCommandAccepted:= FALSE;		
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Property Name="System" Id="{cf2df25f-a536-4535-afaa-409caed81220}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
//Interface to CHALET system to which this object belongs
PROPERTY System : I_XP_System_PLC]]></Declaration>
      <Get Name="Get" Id="{332880f2-2291-4700-9ccb-48789bbf0329}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[//get I_x_System_PLC interface from I_x_System_Registration
__QUERYINTERFACE(THIS^.ipXpSystem, System);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Update" Id="{c50a1686-3c62-4921-a488-8252c4ec92b4}">
      <Declaration><![CDATA[METHOD PUBLIC Update : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[


// ********************** Set feedback depending on active command *******************************
CASE THIS^.eActiveCommand OF
	E_NcAxisCommands.None: 
		//Display if a Mover Error is active during no command is active
		IF THIS^.fbGroup.Error AND NOT fbFeedback.Error THEN 
			fbFeedback.ErrorId 			:= THIS^.fbGroup.ErrorID;
			fbFeedback.ActiveCommand 	:= TO_STRING(E_NcAxisCommands.None);	
			fbFeedback.ClearObjectInfo();
		END_IF

	E_NcAxisCommands.Initialize:
		fbFeedback.Busy 			:= NOT THIS^.bInitDone;
		fbFeedback.Done 			:= THIS^.bInitDone;
		fbFeedback.ErrorId 			:= 0;
		fbFeedback.ClearObjectInfo();
		                        	
	E_NcAxisCommands.Enable:     	
		fbFeedback.Busy 			:= fbFeedbackEnable.Busy;
		fbFeedback.Done 			:= fbFeedbackEnable.Done;
		fbFeedback.ErrorId 			:= fbFeedbackEnable.ErrorID;
        fbFeedback.ObjectInfo		:= fbFeedbackEnable.objectInfo;
                                			                        	
	E_NcAxisCommands.Disable:     	
		fbFeedback.Busy 			:= fbFeedbackDisable.Busy;
		fbFeedback.Done 			:= fbFeedbackDisable.Done;
		fbFeedback.ErrorId 			:= fbFeedbackDisable.ErrorID;
        fbFeedback.ObjectInfo		:= fbFeedbackDisable.objectInfo;
                                			                        	
	E_NcAxisCommands.Reset:     	
		fbFeedback.Busy 			:= fbFeedbackReset.Busy;
		fbFeedback.Done 			:= fbFeedbackReset.Done;
		fbFeedback.ErrorId 			:= fbFeedbackReset.ErrorID;
        fbFeedback.ObjectInfo		:= fbFeedbackReset.objectInfo;
                                		
	ELSE//External command in subclass
		;
END_CASE


// **********************  Stop to execute commands on .done or .error ***************************
IF fbFeedback.Done OR THIS^.fbFeedback.Error THEN
	eActiveCommand 				:= E_NcAxisCommands.None;
END_IF

//Update xplanar object
THIS^.fbGroup.Update();

//Update feedback object
fbFeedbackEnable.Update(); 
fbFeedbackDisable.Update(); 
fbFeedbackReset.Update(); 
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>