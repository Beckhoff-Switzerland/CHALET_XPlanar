<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_XP_Zone" Id="{9b5c2aba-5d65-4390-8f35-cbd4e5d75462}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'Do not call the body - Stick to OOP'}
// Check zone start to end in positive direktion.
FUNCTION_BLOCK FB_XP_Zone EXTENDS FB_CH_Object IMPLEMENTS I_XP_Zone
VAR
	{attribute 'hide'}
	bInitDone : BOOL;
	{attribute 'hide'}
	ipXpSystem : I_XP_System_Registration; //Interface to XPlanar system 
	{attribute 'hide'}
	ipListOfMoversToCheck : CHALET_BaseComponents.I_CH_LIST;
	{attribute 'hide'}
	aMoversInZone : ARRAY [0..(CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1)] OF I_XP_Mover_PLC;
	{attribute 'hide'}
	fStartPositionOnTrack : LREAL;
	{attribute 'hide'}
	fEndPositionOnTrack : LREAL;	
	{attribute 'hide'}
	ipAccocietedTrack : I_XP_Track;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="AccocietedTrack" Id="{54f95ac3-51d8-4f2e-bb9d-69155c8c8898}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY AccocietedTrack : I_XP_Track]]></Declaration>
      <Get Name="Get" Id="{2aec8e3b-a953-4173-b2ba-5286050316b3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AccocietedTrack := THIS^.ipAccocietedTrack;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2eca0fca-089c-4144-85b7-ed68c2ecb24c}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.ipAccocietedTrack := AccocietedTrack;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="CtsMoversInZone" Id="{5fcab65a-c45f-48aa-9861-8c583938c821}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY CtsMoversInZone : UINT
]]></Declaration>
      <Get Name="Get" Id="{8b39be2e-11bb-4852-a3c8-d4c2357f42e8}">
        <Declaration><![CDATA[VAR
	nIndex : UDINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.Prepare();//Prepare Time-critical information

//Check array for entrys, exit if fisrt empty arrayindex is found.
FOR nIndex := 0 TO (CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1) DO
	IF (aMoversInZone[nIndex] <> 0) THEN
		CtsMoversInZone := CtsMoversInZone +1;
	ELSE
		RETURN;
	END_IF
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="EndPositionOnTrack" Id="{a0fa287d-9b0c-40ab-838b-6912a44e3896}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY EndPositionOnTrack : LREAL
]]></Declaration>
      <Get Name="Get" Id="{0748fc3f-261f-46af-95b0-f775d75211bf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EndPositionOnTrack := fEndPositionOnTrack;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c09dcc01-0559-4021-a6a5-2ce84419f470}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fEndPositionOnTrack := EndPositionOnTrack;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FB_init" Id="{6e983b48-77a3-4dff-900b-b1bd15863c70}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	ipXpSystem : I_XP_System_Registration; //Interface to XPlanar system object
END_VAR
VAR_INST
	{attribute 'hide'}
	bFBInitCalledOnce : BOOL; //Do the following code once during start up and not during onlinechange
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Do the following code once during start up and not during onlinechange
IF NOT bFBInitCalledOnce THEN 
	;
END_IF

//Regristrate object in System if unknown
IF ipXpSystem <> 0 AND THIS^.ipXpSystem = 0 THEN
	ipXpSystem.RegisterZone(THIS^);
	THIS^.ipXpSystem := ipXpSystem;
END_IF

bFBInitCalledOnce := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="HR" Id="{a14fee94-3257-4d49-8f83-cbcb4fe15ef7}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY HR : HRESULT
]]></Declaration>
      <Get Name="Get" Id="{3ecbfe86-e365-4eb3-b9a3-44450e89b85a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ipAccocietedTrack <> 0 AND_THEN ipAccocietedTrack.Length > 0 THEN
	HR := S_OK;
ELSE
	HR := E_FAIL;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{bded9a3f-15e5-4382-a88c-b201de005416}">
      <Declaration><![CDATA[METHOD Initialize : HRESULT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.ipXpSystem = 0 THEN
	//No valide interface
	Initialize := E_FAIL;
	RETURN;
END_IF


IF (THIS^.ipListOfMoversToCheck <> 0) AND (THIS^.ipAccocietedTrack <> 0) THEN
	THIS^.bInitDone := TRUE;
	Initialize := S_OK;
ELSE
	Initialize := E_FAIL;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="ListOfMoversToCheck" Id="{857ff228-6ee0-43a7-8a6a-1db86eb1fb2c}">
      <Declaration><![CDATA[PROPERTY ListOfMoversToCheck : I_CH_List]]></Declaration>
      <Set Name="Set" Id="{a4c5f319-273f-405f-aa39-ac407eb7a61e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ListOfMoversToCheck <> 0 THEN
	ipListOfMoversToCheck := ListOfMoversToCheck;
END_IF

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoversInZone" Id="{d637c274-a77a-4857-a4ee-3f4555864a74}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY MoversInZone : REFERENCE TO ARRAY [0..(CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1)] OF I_XP_Mover_PLC // Return a sorted list of movers in this zone. Index 0 is the mover in Front.]]></Declaration>
      <Get Name="Get" Id="{8409ff4e-605e-4576-a1bf-903a1943eced}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^.Prepare();//Prepare Time-critical information

MoversInZone REF= THIS^.aMoversInZone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Prepare" Id="{f7cecc17-4d6f-4b63-bc01-d1776bce3f38}">
      <Declaration><![CDATA[(* Time-critical information is processed here, which can then be polled via the property every cycle. 
The update method is usually at the end of the program and then it is already 'outdated'. *)
METHOD PRIVATE Prepare : HRESULT
VAR
	nLoopIndex : UDINT;
	ipMoverPlc : I_XP_Mover_PLC;
	fDistToStart : LREAL;
	aDisanceToStart : ARRAY [0..(CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1)] OF LREAL;
END_VAR
VAR_INST
	{attribute 'hide'}
	nLastUpdatedCycleCount : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Check if this Cycle the dates are allready prepared
IF nLastUpdatedCycleCount <> TwinCAT_SystemInfoVarList._TaskInfo[THIS^.nTaskIndex].CycleCount THEN
	nLastUpdatedCycleCount := TwinCAT_SystemInfoVarList._TaskInfo[THIS^.nTaskIndex].CycleCount;

	//Clear array
	MEMSET(destAddr:=ADR(aMoversInZone),n:=SIZEOF(aMoversInZone),fillByte:=0);
	
	//Cheack all Movers and generate a sorted list of all mover in this zone
	THIS^.ipListOfMoversToCheck.ResetIterator();
	WHILE THIS^.ipListOfMoversToCheck.HasNextObject() DO
		IF __QUERYINTERFACE(THIS^.ipListOfMoversToCheck.GetNextObject(),ipMoverPlc) THEN
			
			//If in zone
			IF ipMoverPlc.CurrentTrack = THIS^.ipAccocietedTrack AND_THEN (fStartPositionOnTrack <= ipMoverPlc.PositionOnTrack) AND (fEndPositionOnTrack >= ipMoverPlc.PositionOnTrack) AND (fStartPositionOnTrack <= fEndPositionOnTrack) THEN
				fDistToStart := fEndPositionOnTrack - ipMoverPlc.PositionOnTrack;
				
				//Check array of movers and decide if the current one is closer to 
				FOR nLoopIndex := 0 TO (CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1) DO
					//empty array position
					IF aMoversInZone[nLoopIndex] = 0 THEN
						aMoversInZone[nLoopIndex] := ipMoverPlc;
						aDisanceToStart[nLoopIndex] := fDistToStart;
						EXIT;
						
					//Closer Mover found, move whole array 	
					ELSIF aDisanceToStart[nLoopIndex] > fDistToStart THEN
						MEMMOVE(srcAddr := ADR(aMoversInZone[nLoopIndex]), destAddr := ADR(aMoversInZone[nLoopIndex+1]), n := (SIZEOF(aMoversInZone[0])*(CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1)));
						MEMMOVE(srcAddr := ADR(aDisanceToStart[nLoopIndex]), destAddr := ADR(aDisanceToStart[nLoopIndex+1]), n := (SIZEOF(aDisanceToStart[0])*(CHALET_BaseComponents.BaseParameterlist.MAX_OBJECTS-1)));
						aMoversInZone[nLoopIndex] := ipMoverPlc;
						aDisanceToStart[nLoopIndex] := fDistToStart;
						EXIT;
						
					//check next position	
					ELSE 
						;
					END_IF
				END_FOR
			END_IF
		END_IF
	END_WHILE
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartPositionOnTrack" Id="{db42354e-ef45-425c-b30c-a2d6abbf207d}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY StartPositionOnTrack : LREAL
]]></Declaration>
      <Get Name="Get" Id="{14b70797-8a1a-45b4-946c-8aba3c90796d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartPositionOnTrack := fStartPositionOnTrack;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{137f1219-958d-4a1d-b795-cab82da4b5eb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fStartPositionOnTrack := StartPositionOnTrack;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Update" Id="{a57b36be-57e2-46fb-ac48-3faaf13c289d}">
      <Declaration><![CDATA[METHOD Update : HRESULT
VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Nothing todo in Update. Check Prepare]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>